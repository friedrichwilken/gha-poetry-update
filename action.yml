name: 'Poetry Update'
description: 'Runs `poetry update`, checks for newer dependencies. Creates a pull request if any updates are available.'
author: 'Fuzzy Labs & Friedrich Wilken'
branding:
  icon: "chevrons-up"
  color: "purple"
inputs:
  python-version:
    description: "The python version to use with poetry"
    default: '3.10.12'
  poetry-version:
    description: "The poetry version to use"
    default: '1.8.2'
  directory:
    description: "The directory of the project files"
    default: './'
  pr-title-prefix:
    description: 'A prefix that gets prependet to the PR title'
  pr-labels:
    description: 'A comma or newline separated list of labels added to the PR'

runs:
  using: "composite"
  steps:
    #----------------------------------------------
    #  Check minimum python & poetry version
    #----------------------------------------------
    # 3.10.5 is the min version support for ubuntu 22.04 (latest)
    # Poetry 1.2 is the first release that support python >=3.8
    - name: Check compatible version
      run: |
        min_python_version="3.10"
        min_poetry_version="1.2"
        if [ "$(printf '%s\n' "$min_python_version" "${{ inputs.python-version }}" | sort -V | head -n1)" != "$min_python_version" ]; then
          echo "Less than the minimum required python version: ${min_python_version}, exiting workflow"
          echo "RUN_UPDATE=false" >> $GITHUB_ENV
          exit 0
        fi

        if [ "$(printf '%s\n' "$min_poetry_version" "${{ inputs.poetry-version }}" | sort -V | head -n1)" != "$min_poetry_version" ]; then
          echo "Less than the minimum required poetry version: ${min_poetry_version}, exiting workflow"
          echo "RUN_UPDATE=false" >> $GITHUB_ENV
          exit 0
        fi
      shell: bash

    #----------------------------------------------
    #  Check out the caller repo & Set up python
    #----------------------------------------------
    - name: Check out repository
      if: env.RUN_UPDATE != 'false'
      uses: actions/checkout@v4

    - name: Set up python
      if: env.RUN_UPDATE != 'false'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        

    #----------------------------------------------
    #           Install & configure poetry
    #----------------------------------------------
    - name: Install Poetry
      if: env.RUN_UPDATE != 'false'
      uses: snok/install-poetry@v1
      with:
        version: ${{ inputs.poetry-version }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    #----------------------------------------------
    #         Check if poetry.lock exists
    #----------------------------------------------
    - name: Check if poetry.lock exists
      working-directory: ${{ inputs.directory }}
      if: env.RUN_UPDATE != 'false'
      run: |
        if [ -f "poetry.lock" ]; then
          echo "poetry.lock file found, running poetry update."
        else
          echo "poetry.lock file not found, skipping poetry update."
          echo "RUN_UPDATE=false" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Poetry install
      run: poetry install

    #----------------------------------------------
    #   Get package names
    #----------------------------------------------
    - name: Get package names
      id: get_packages
      run: |
        packages=$(poetry show -T | awk '{print $1}' | paste -sd "," -)
        echo "packages=$packages" >> $GITHUB_OUTPUT

    - name: Show package array
      run: |
        echo "Packages: ${{ steps.get_packages.outputs.packages }}"

    - name: Update, test, commit successes, and collect results
      id: update_test
      env:
        TEST_COMMAND: ${{ inputs.test_command }}
        GITHUB_ACTOR: ${{ github.actor }}
        GITHUB_EMAIL: ${{ github.actor }}@users.noreply.github.com
      run: |
        # Split the comma-separated package list into an array
        IFS=',' read -ra pkgs <<< "${{ steps.get_packages.outputs.packages }}"
        failed=""
        passed=""

        # Configure git user for commits
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_EMAIL}"

        for pkg in "${pkgs[@]}"; do
          echo "::group::updating package $pkg"
          echo "Updating $pkg"
          poetry update "$pkg"

          # Check if the test command is empty
          if [ -z "$TEST_COMMAND" ]; then
            echo "No test command provided, skipping tests for $pkg."
            test_passed=true
          else
            echo "Running test command: $TEST_COMMAND"
            if bash -c "$TEST_COMMAND"; then
              echo "Test passed for $pkg"
              test_passed=true
            else
              echo "Test failed for $pkg, undoing changes..."
              git reset --hard
              test_passed=false
            fi
          fi

          # If test passed (or was skipped), commit the update
          if [ "$test_passed" = true ]; then
            passed="${passed}${pkg},"
            git add .
            git commit -m "Update and successfully test $pkg"
          else
            failed="${failed}${pkg},"
          fi

          echo "::endgroup::"
        done

        # Remove trailing commas
        failed="${failed%,}"
        passed="${passed%,}"

        # Export the failed and passed package names as step outputs
        echo "failed_packages=$failed" >> $GITHUB_OUTPUT
        echo "passed_packages=$passed" >> $GITHUB_OUTPUT

    #----------------------------------------------
    #              Create a pull request
    #----------------------------------------------
    - name: Create branch name
      working-directory: ${{ inputs.directory }}
      if: env.RUN_UPDATE != 'false'
      shell: bash
      run: |
        if [ ${{ inputs.directory }} == "./" ]
        then
          BRANCH_NAME="update/poetry-update"
          BRANCH_TITLE="Update poetry dependencies"
          COMMIT_MESSAGE="Chore(deps): Upgrading poetry dependencies"
        else
          # replace " " and "_" with dashes
          BRANCH_NAME=$(echo ${{ inputs.directory }} | sed -r "s/[_ ]/-/g" | sed -r "s/\//--/g")
          # remove trailing dashes
          BRANCH_NAME=$(echo $BRANCH_NAME | sed -r "s/-+$//g")
          # NOTE: undesirable behaviour may occur if a project directory name is excessively long (~100 chars)
          # or if two projects share the same name up to substitutions of "-" with " ".
          BRANCH_NAME="update/poetry-update-$BRANCH_NAME"
          BRANCH_TITLE="Update poetry dependencies for ${{ inputs.directory }}"
          COMMIT_MESSAGE="Chore(deps): Upgrading poetry dependencies for ${{ inputs.directory }}"
        fi
        {
          echo "BRANCH_NAME<<EOF"
          echo $BRANCH_NAME
          echo "EOF"
        } >> $GITHUB_ENV
        {
          echo "BRANCH_TITLE<<EOF"
          echo $BRANCH_TITLE
          echo "EOF"
        } >> $GITHUB_ENV
        {
          echo "COMMIT_MESSAGE<<EOF"
          echo $COMMIT_MESSAGE
          echo "EOF"
        } >> $GITHUB_ENV

    # Create a pull request for all successful updates
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v6
      with:
        commit-message: "Update and successfully test packages"
        title: "${{ inputs.pr-title-prefix }}update and successfully test packages"
        body: |
          This PR updates the following packages that passed testing:
          ${{ steps.update_test.outputs.passed_packages }}
          Failed packages:
          ${{ steps.update_test.outputs.failed_packages }}
        branch: update-successful-packages-${{ steps.date.outputs.date }}
        delete-branch: true
