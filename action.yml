name: 'Poetry Update'
description: 'Runs `poetry update`, checks for newer dependencies. Creates a pull request if any updates are available.'
author: 'Fuzzy Labs & Friedrich Wilken'
branding:
  icon: "chevrons-up"
  color: "purple"
inputs:
  python-version:
    description: "The python version to use with poetry"
    default: '3.10.12'
  poetry-version:
    description: "The poetry version to use"
    default: '1.8.2'
  directory:
    description: "The directory of the project files"
    default: './'
  pr-title-prefix:
    description: 'A prefix that gets prependet to the PR title'
  pr-labels:
    description: 'A comma or newline separated list of labels added to the PR'
  test-command:
    description: a command for a test to run after updating every package
    default: ''

runs:
  using: "composite"
  steps:
    #----------------------------------------------
    #  Check minimum python & poetry version
    #----------------------------------------------
    # 3.10.5 is the min version support for ubuntu 22.04 (latest)
    # Poetry 1.2 is the first release that support python >=3.8
    - name: Check compatible version
      run: |
        min_python_version="3.10"
        min_poetry_version="1.2"
        if [ "$(printf '%s\n' "$min_python_version" "${{ inputs.python-version }}" | sort -V | head -n1)" != "$min_python_version" ]; then
          echo "Less than the minimum required python version: ${min_python_version}, exiting workflow"
          echo "RUN_UPDATE=false" >> $GITHUB_ENV
          exit 0
        fi

        if [ "$(printf '%s\n' "$min_poetry_version" "${{ inputs.poetry-version }}" | sort -V | head -n1)" != "$min_poetry_version" ]; then
          echo "Less than the minimum required poetry version: ${min_poetry_version}, exiting workflow"
          echo "RUN_UPDATE=false" >> $GITHUB_ENV
          exit 0
        fi
      shell: bash

    #----------------------------------------------
    #  Check out the caller repo & Set up python
    #----------------------------------------------
    - name: Check out repository
      if: env.RUN_UPDATE != 'false'
      uses: actions/checkout@v4

    - name: Set up python
      if: env.RUN_UPDATE != 'false'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        

    #----------------------------------------------
    #           Install & configure poetry
    #----------------------------------------------
    - name: Install Poetry
      if: env.RUN_UPDATE != 'false'
      uses: snok/install-poetry@v1
      with:
        version: ${{ inputs.poetry-version }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    #----------------------------------------------
    #         Check if poetry.lock exists
    #----------------------------------------------
    - name: Check if poetry.lock exists
      working-directory: ${{ inputs.directory }}
      if: env.RUN_UPDATE != 'false'
      shell: bash
      run: |
        if [ -f "poetry.lock" ]; then
          echo "poetry.lock file found, running poetry update."
        else
          echo "poetry.lock file not found, skipping poetry update."
          echo "RUN_UPDATE=false" >> $GITHUB_ENV
        fi

    - name: Poetry install
      shell: bash
      run: |
        echo "::group::installing packages"
        poetry install
        echo "::endgroup::"

    #----------------------------------------------
    #   Get package names
    #----------------------------------------------
    - name: Get package names
      id: get_packages
      shell: bash
      run: |
        packages=$(poetry show -T | awk '{print $1}' | paste -sd "," -)
        echo "packages=$packages" >> $GITHUB_OUTPUT

    - name: Show package array
      shell: bash
      run: |
        echo "Packages: ${{ steps.get_packages.outputs.packages }}"

    - name: Update, test, commit successes, and collect results
      id: update_test
      env:
        TEST_COMMAND: "${{ inputs.test-command }}"
        GITHUB_ACTOR: ${{ github.actor }}
        GITHUB_EMAIL: ${{ github.actor }}@users.noreply.github.com
      shell: bash
      run: |
        # Split the comma-separated package list into an array
        IFS=',' read -ra pkgs <<< "${{ steps.get_packages.outputs.packages }}"
        failed=""
        passed=""

        # Configure git user for commits
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_EMAIL}"

        for pkg in "${pkgs[@]}"; do
          echo "::group::updating package $pkg"
          echo "Updating $pkg"
          # Capture the output of poetry update
          update_output=$(poetry update "$pkg" 2>&1)
          echo "$update_output"
          # Check if poetry says there's nothing to update
          if echo "$update_output" | grep -q "No dependencies to install or update"; then
            echo "No update available for $pkg, skipping test and commit."
            skipped="${skipped}${pkg},"
            echo "::endgroup::"
            continue
          fi

          # Check if test command is provided
          if [ -z "$TEST_COMMAND" ]; then
            echo "No test command provided, skipping tests for $pkg."
            test_passed=true
          else
            echo "Running test command: $TEST_COMMAND"
            if bash -c "$TEST_COMMAND"; then
              echo "Test passed for $pkg"
              test_passed=true
            else
              echo "Test failed for $pkg, undoing changes..."
              git reset --hard
              test_passed=false
            fi
          fi

          if [ "$test_passed" = true ]; then
            passed="${passed}${pkg},"
            git add .
            git commit -m "Update and successfully test $pkg"
          else
            failed="${failed}${pkg},"
          fi

          echo "::endgroup::"
        done

        # Remove trailing commas
        failed="${failed%,}"
        passed="${passed%,}"

        # Export the failed and passed package names as step outputs
        echo "failed_packages=$failed" >> $GITHUB_OUTPUT
        echo "passed_packages=$passed" >> $GITHUB_OUTPUT

    - name: Format package lists for PR
      id: format_lists
      shell: bash
      run: |
        echo "::group::Creating PR Body"
        # Format passed packages
        echo "## Updated packages:" > package_list.txt
        if [ -n "${{ steps.update_test.outputs.passed_packages }}" ]; then
          echo "${{ steps.update_test.outputs.passed_packages }}" | sed 's/,/\n- /g' | sed '1s/^/- /' > package_list.txt
        else
          echo "None" > package_list.txt
        fi

        # Format failed packages
        echo "## Packages, failed to update:" > package_list.txt
        if [ -n "${{ steps.update_test.outputs.failed_packages }}" ]; then
          echo "${{ steps.update_test.outputs.failed_packages }}" | sed 's/,/\n- /g' | sed '1s/^/- /' > package_list.txt
        else
          echo "None" > package_list.txt
        fi

        # Set outputs
        echo "packages<<EOF" >> $GITHUB_OUTPUT
        cat package_list.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        cat package_list.txt
        echo "::endgroup::"


    - name: Create PR
      shell: bash
      run: |
        echo "::group::Creating PR"
        if [ "$(git rev-parse HEAD)" != "$(git rev-parse origin/main)" ]; then
          # Create a new branch as the base of our new PR.
          git checkout -b update-successful-packages-$(date +'%Y%m%d-%H%M%S')
          # Push the new branch. 
          git push origin HEAD
          # Create a new PR:
          gh pr create \
          --title "Update and successfully test packages" \
          --body "${{ steps.format_lists.outputs.packages }}" \
          --head update-successful-packages-$(date +'%Y%m%d-%H%M%S')
        else
          echo "No new commits to create a PR for."
        fi
        echo "::endgroup::"

